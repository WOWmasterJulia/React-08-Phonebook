{"version":3,"file":"static/js/6.4db4db1c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selectors.jsx","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactFind/ContactFind.module.css?edeb","components/ContactFind/ContactFind.jsx","webpack://react-homework-template/./src/pages/Phonebook.module.css?cbd2","pages/Phonebook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"labelForm\":\"ContactForm_labelForm__DEnf8\",\"labelInput\":\"ContactForm_labelInput__Qk4qS\",\"btnForm\":\"ContactForm_btnForm__cx8-v\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectValueFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectValueFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3)\n    .max(30)\n    // .trim()\n    // .matches(\n    //   /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n    //   'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer'\n    // )\n    .required(),\n  number: yup\n    .string()\n    .min(6)\n    .max(15)\n    // .trim()\n    // .matches(\n    //   /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n    //   'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    // )\n    .required(),\n  // number: yup.string().phone().required(),\n});\n\nconst initValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const listContacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (listContacts.some(item => item.name === values.name)) {\n      alert('This contact has already been added.');\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={css.contactForm} autoComplete=\"off\">\n        <label htmlFor={nameInputId} className={css.labelForm}>\n          Name\n        </label>\n        <Field\n          id={nameInputId}\n          className={css.labelInput}\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          placeholder=\"Enter name\"\n        />\n        <ErrorMessage name=\"name\" className={css.errorMessage} />\n        <label htmlFor={numberInputId} className={css.labelForm}>\n          Number\n        </label>\n        <Field\n          id={numberInputId}\n          className={css.labelInput}\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          placeholder=\"Enter phone number\"\n        />\n        <ErrorMessage name=\"number\" className={css.errorMessage} />\n        <button className={css.btnForm} type=\"submit\">\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\n// return (\n//   <form className={css.contactForm} onSubmit={handleSubmit}>\n//     <label htmlFor={nameInputId} className={css.labelForm}>Name</label>\n//     <input\n//       id={nameInputId}\n//       className={css.labelInput}\n//       type=\"text\"\n//       name=\"name\"\n//       value={name}\n//       placeholder=\"Enter name\"\n//       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//       title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//       required\n//       onChange={handleChange}\n//     />\n//     <label htmlFor={numberInputId} className={css.labelForm}>Number</label>\n//     <input\n//       id={numberInputId}\n//       className={css.labelInput}\n//       type=\"tel\"\n//       name=\"number\"\n//       value={number}\n//       placeholder=\"Enter phone number\"\n//       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//       title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//       required\n//       onChange={handleChange}\n//     />\n//     <button className={css.btnForm} type=\"submit\">Add contact</button>\n//   </form>\n// );\n","// extracted by mini-css-extract-plugin\nexport default {\"list_item\":\"ContactItem_list_item__2NJz8\",\"delete_btn\":\"ContactItem_delete_btn__g7vZ0\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport css from './ContactItem.module.css';\n\nexport const ContactItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteContact(id));\n return (\n        <li className={css.list_item} >{`${name} : ${number}`}\n            <button\n                className={css.delete_btn}\n                type=\"button\"\n                onClick={handleDelete}\n            >Delete\n            </button>\n        </li>\n    )\n}\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"contacts_list\":\"ContactList_contacts_list__jhchV\"};","import { ContactItem } from '../ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  \n  return (\n    <ul className={css.contacts_list}>\n      {contacts.map(contact => (\n        <ContactItem\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n        />\n      ))}\n    </ul>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"find_label\":\"ContactFind_find_label__Od46H\",\"find_input\":\"ContactFind_find_input__sRzmp\"};","import css from './ContactFind.module.css'\nimport { nanoid } from \"nanoid\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectValueFilter } from '../../redux/selectors';\nimport { setFilter } from '../../redux/filterSlice';\n\nexport const ContactFind = () => {\n    const dispatch = useDispatch();\n    const find = useSelector(selectValueFilter);\n    const inputId = nanoid();\n  \n    const changeFilter = e => {\n      const value = e.currentTarget.value.toLowerCase();\n      dispatch(setFilter(value));\n  };\n\n    return (\n      <>\n        <label className={css.find_label} htmlFor={inputId}>\n          Find contacts by name\n        </label>\n        <input\n          id={inputId}\n          className={css.find_input}\n          type=\"text\"\n          name=\"find\"\n          value={find}\n          placeholder=\"Find name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={changeFilter}\n        />\n      </>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Phonebook_wrap__FGumr\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactFind } from '../components/ContactFind/ContactFind';\nimport { fetchAllContacts } from 'redux/operations';\nimport { selectIsLoading, selectError } from 'redux/selectors';\nimport css from './Phonebook.module.css'\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.wrap}>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h3>Contacts</h3>\n      <ContactFind />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n};\n// const styles = {\n//   container: {\n//     minHeight: 'calc(100vh - 50px)',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   }\n//   };"],"names":["selectContacts","state","contacts","items","selectValueFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","nameInputId","nanoid","numberInputId","schema","yup","shape","min","max","required","number","initValues","ContactForm","dispatch","useDispatch","listContacts","useSelector","initialValues","validationSchema","onSubmit","values","resetForm","some","item","alert","addContact","className","css","autoComplete","htmlFor","id","type","placeholder","ContactItem","onClick","deleteContact","ContactList","map","ContactFind","find","inputId","value","title","onChange","e","currentTarget","setFilter","Phonebook","useEffect","fetchAllContacts"],"sourceRoot":""}